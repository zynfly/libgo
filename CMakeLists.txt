cmake_minimum_required(VERSION 2.8)

set(CMAKE_CXX_STANDARD 11)

project(libgo)

if (CMAKE_BUILD_TYPE)
else()
    set(CMAKE_BUILD_TYPE RELEASE)
endif()

message("------------ Options -------------")
message("  CMAKE_BUILD_TYPE: ${CMAKE_BUILD_TYPE}")

message ("  BOOST_ROOT: ${BOOST_ROOT}")
option(DEPEND_BOOST "link boost" OFF)

if (ENABLE_BOOST_COROUTINE)
    include (${PROJECT_SOURCE_DIR}/boost.cmake)
    message ("  layer_context: boost.coroutine")
    set(DEPEND_BOOST ON)
    set(USE_BOOST_COROUTINE 1)
    set(USE_BOOST_CONTEXT 0)
    set(USE_UCONTEXT 0)
    set(USE_FIBER 0)
else()
    if (ENABLE_BOOST_CONTEXT)
        include (${PROJECT_SOURCE_DIR}/boost.cmake)
        message ("  layer_context: boost.context")
        set(DEPEND_BOOST ON)
        set(USE_BOOST_COROUTINE 0)
        set(USE_BOOST_CONTEXT 1)
        set(USE_UCONTEXT 0)
        set(USE_FIBER 0)
    else()
        set(USE_BOOST_COROUTINE 0)
        set(USE_BOOST_CONTEXT 0)
        if (UNIX)
            set(USE_UCONTEXT 1)
            set(USE_FIBER 0)
            message ("  layer_context: ucontext")
        else()
            set(USE_UCONTEXT 0)
            set(USE_FIBER 1)
            message ("  layer_context: fiber")
        endif()
    endif()
endif()


option(WITH_CARES "compile with libcares" OFF)
if (WITH_CARES)
    set(WITH_CARES 1)
    message ("  use cares: yes")
else()
    set(WITH_CARES 0)
    message ("  use cares: no")
endif()


option(WITH_SAFE_SIGNAL "compile with SAFE_SIGNAL" OFF)
if (WITH_SAFE_SIGNAL)
    set(WITH_SAFE_SIGNAL 1)
    message ("  use safe signal: yes")
else()
    set(WITH_SAFE_SIGNAL 0)
    message ("  use safe signal: no")
endif()


option(LIBGO_SINGLE_THREAD "single thread mode" OFF)
if (LIBGO_SINGLE_THREAD)
    set(LIBGO_SINGLE_THREAD 1)
    message ("  single thread mode: yes")
else()
    set(LIBGO_SINGLE_THREAD 0)
    message ("  single thread mode: no")
endif()

option(ENABLE_DEBUGGER "enable debugger" OFF)
if (ENABLE_DEBUGGER)
    set(ENABLE_DEBUGGER 1)
    message ("  enable_debugger: yes")
else()
    set(ENABLE_DEBUGGER 0)
    message ("  enable_debugger: no")
endif()

if (DISABLE_HOOK)
    message ("  enable_hook: no")
else()
    message ("  enable_hook: yes")
endif()

if (DISABLE_DYNAMIC_LIB)
    message ("  build_dynamic_lib: no")
else()
    message ("  build_dynamic_lib: yes")
endif()

if (UNIX)
    set(CMAKE_CXX_FLAGS "-fPIC -Wall -pthread ${CMAKE_CXX_FLAGS}")
    set(CMAKE_CXX_FLAGS_DEBUG "-g -pg ${CMAKE_CXX_FLAGS} -Werror")
    set(CMAKE_CXX_FLAGS_RELEASE "-g -O3 ${CMAKE_CXX_FLAGS} -Werror")
elseif (WIN32)
    if(MSVC)
        add_definitions(-D_CRT_SECURE_NO_WARNINGS)
        if (NOT DISABLE_DYNAMIC_LIB)
            set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /MDd")
            set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /MD")
        else()
            set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /MTd")
            set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /MT")
        endif()
    else()
        set(CMAKE_CXX_FLAGS "-std=c++11 -fPIC -Wall ${CMAKE_CXX_FLAGS}")
        set(CMAKE_CXX_FLAGS_DEBUG "-g -pg ${CMAKE_CXX_FLAGS} -Werror")
        set(CMAKE_CXX_FLAGS_RELEASE "-g -O3 ${CMAKE_CXX_FLAGS} -Werror")
    endif()
endif()


message("------------ Cxx flags -------------")
message("  CMAKE_CXX_FLAGS_DEBUG: ${CMAKE_CXX_FLAGS_DEBUG}")
message("  CMAKE_CXX_FLAGS_RELEASE: ${CMAKE_CXX_FLAGS_RELEASE}")
message("------------------------------------")


add_subdirectory(dep)


message("----------------------------------")

message("-------------- Env ---------------")
message("  CMAKE_SOURCE_DIR: ${CMAKE_SOURCE_DIR}")
message("  CMAKE_BINARY_DIR: ${CMAKE_BINARY_DIR}")
message("----------------------------------")

include_directories(./)
add_subdirectory(libgo)

add_subdirectory(test)
add_subdirectory(tutorial)